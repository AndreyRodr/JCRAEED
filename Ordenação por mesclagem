<mergeSort>
# Funcionamento
  - O vetor é divido em vetores com a metade do tamanho original, de forma recursiva
  - Isso ocorre até que o vetor fique com apenas um elemento e estes sejam ordenados e intercalados

def swap(list, i, j):
    """ Swaps the items in positions i and j."""
    # Equvalent to list[i], list[j] = list[j], list[i], but the following code shows what is actually happening
    temp = list[i]
    list[i] = list[j]
    list[j] = temp

def merge(list, copyBuffer, low, middle, high):
    i1 = low # Initializes i1 and i2 for the first items in each sublist
    i2 = middle + 1
    # Interleaves items from sublists in copyBuffer to maintain order
    for i in range(low, high + 1):
        if i1 > middle:
            copyBuffer[i] = list[i2] # First sublist covered
            i2 += 1
        elif i2 > high:
            copyBuffer[i] = list[i1] # Second sublist covered
            i1 += 1
        elif list[i1] < list[i2]:
            copyBuffer[i] = list[i1] # Item in first sublist <
            i1 += 1
        else:
            copyBuffer[i] = list[i2] # Item in second sublist <
            i2 += 1
    for i in range(low, high + 1): # Copy sorted items back
        list[i] = copyBuffer[i]    # To suitable position in the list

def mergeSortHelper(list, copyBuffer, low, high):
    if low < high:
        middle = (low + high) // 2
        mergeSortHelper(list, copyBuffer, low, middle)
        mergeSortHelper(list, copyBuffer, middle + 1, high)
        merge(list, copyBuffer, low, middle, high)

def mergeSort(list):
    copyBuffer = [0]*(len(list))
    mergeSortHelper(list, copyBuffer, 0, len(list) - 1)

numbers = [5,3,1,8,2]
print(numbers)
mergeSort(numbers)
print(numbers)
